import java.util.*;
public class Main
{
	public static void main(String[] args) {
		Solution sol = new Solution();
	
        // Node node = new Node(3);
		TreeNode left = new TreeNode(4);
		TreeNode right = new TreeNode(3);
	    left.right=new TreeNode(6);
	    left.left=new TreeNode(7);
	    right.left=new TreeNode(8);
	    right.right=new TreeNode(9);
	    
	   	TreeNode tree = new TreeNode(2,left,right);
		
// 		TreeNode tree = new TreeNode(2);
		System.out.println(sol.levelOrder(tree));
		
		
	}
}

class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode() {}
      TreeNode(int val) { this.val = val; }
     TreeNode(int val, TreeNode left, TreeNode right) {
          this.val = val;
         this.left = left;
       this.right = right;
      }
  }
  
  class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        List<List<Integer>> wrapList = new LinkedList<List<Integer>>();
        
        if(root == null) return wrapList;
        
        queue.offer(root);
        while(!queue.isEmpty()){
            int levelNum = queue.size();
            List<Integer> subList = new LinkedList<Integer>();
            for(int i=0; i<levelNum; i++) {
                if(queue.peek().left != null) queue.offer(queue.peek().left);
                if(queue.peek().right != null) queue.offer(queue.peek().right);
                subList.add(queue.poll().val);
            }
            wrapList.add(subList);
        }
        return wrapList;
    }
}
